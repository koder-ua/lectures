1) Современная архитектура нагруженных систем
    * множество stateless серверов в многопоточном режиме обрабатывающих запросы
    * балансировщик нагрузки
    * база данных, хранящая состояние и обеспечивающая синхронизациюя обработчиков


2) Эта модель используется очень давно, но с тех пор соотношения возможностей 
железа и объемов хранимой и обрабатываемой информации сильно изменились.

Количество общей информации, которую мы производим достигло астрономических значений 
и растет очень быстрыми темпами (ссылка на видео про то, как понижение стоимости приводит 
к повышению потребности). Но бОльшая часть этой информации не требует немедленной обработки
и анализируемая часть ее очень мала (фото, видео, etc). Назовем это "холодными данными".
Их нужнл сохранять и по запросу отдавать as-is*.

Объем информации, требующей обработки и производящей бОльшой эффект в системе не сильно 
меняется, а в расчете на человека практически константен, поскольку количество такой
информации ограниченно умсвенными возможностями человека и способом его общения с компьютером.

3) Объемы оперативной памяти в одном сервере на сегодняшний день приближаются к объемам
горячих данных БОЛЬШИХ сайтов.

"Free lunch is not over" производительность процессоров в расчете на одно ядро 
уже не растет такими быстрыми темпами, как раньше, но все равно растет достаточно быстро. 
Примерно в 2 раза за 2 года (вместо ~2раза за полтора года). Сокращаются времена 
исполнения команд, увеличиваются кеши. Так-же растет производительность инструментов.

В итоге накладные расходы на работу через сеть, с диском и избыточную синхронизацию
в многопточных системах становится бутылочным горлышком в системе.

Манифест newsql. VoltDB

$2.8 за 244Gb в час

4) Архитектура системы - парралелим то, что параллелится. Шардим, что можно. +L-MAX

 * Балансировщик + обработчики сетевых соединений (если их нужно много). tcp стеки требуют значительных затрат CPU

5) Отказоустойчивость. Простая vs. Raft.
6) Сброс холодных данных в хранилище

7) Втаскивание новой ноды и транзакции через fork
Особенности форка - замедление родительского процесса.

8) Производительность подобных решений. Примеры

Система учета денег для сетевого маркетинга.

9) Транзакционная память - способ использовать многопоточность.
Транзакционная память + RAM = Транзакции + DB

10) Итоговый обзор
